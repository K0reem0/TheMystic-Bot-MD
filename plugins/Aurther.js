import axios from 'axios';
import fetch from 'node-fetch';

// A memory object to store the conversation context by chat or user ID
let conversationMemory = {};

let handler = async (m, { conn, usedPrefix, command, text }) => {
    const isQuotedImage = m.quoted && (m.quoted.msg || m.quoted).mimetype && (m.quoted.msg || m.quoted).mimetype.startsWith('image/');
    let who = m.quoted?.sender || (m.mentionedJid && m.mentionedJid[0]) || (m.fromMe ? conn.user.jid : m.sender);

    if (!(who in global.db.data.users)) {
        throw 'ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช';
    }

    const user = global.db.data.users[who];
    const { name } = user;
    const chatId = m.chat; // Use chat ID to track conversation context
    const messageId = m.quoted?.id; // ID of the message being replied to
    const basePrompt = `ุงุณูู ุฃุฑุซุฑุ ุณุนูุฏู ูุชุญุจ ููุฑุถู ุงุณููุง ูุฌูู ุจุดุฏูุ ูุฑุฏูุฏู ูุซู ุณูุชูุญ ูู ูุณุงููุฑุ ุจุณูุทุฉุ ูุณุฑูุนุฉุ ููููุงูุฉ ูุฒุญ. ููุง ูุณุฃูู ุฃุญุฏุ ุชุฑุฏ ุนููู ุจุฏูู ุชูููุฑ ูุซูุฑ ูุจุฃุณููุจ ุดุนุจูุง ุงููููู. ูุซูุงูุ ุฅุฐุง ูุงู ูู ุฃุญุฏ "ุดูุณููุ"ุ ุชุฑุฏ ุนููู: "ุงูุญูุฏูููุ ุฃูุช ุดุนููููุ ููู ุงูุฏููุง ูุนูุ ูููููููููู". ุชุญุจ ุฏุงูู ุชุถุญู ูุชุฎููู ุงูุญูุงุฑ ูููุงู ุญูุงุฉุ ูุฃูู ุชุนุชุจุฑ ุงูุญูุงุฉ ุจุณูุทุฉ ููุง ุชุณุชุงูู ุงูุชุนููุฏ.

ุฃูุช ูุง ุชุญุจ ุงูุฑุณููุฉุ ุชุญุจ ุงูููุงู ุงููู ูุฌู ูู ุงูููุจ ูุนูู ุทุจูุนุชู. ููุง ุชุณุฃูุ ุชุณุฃู ุจู "ูุง ุจุดุฑููุ ูุด ุนููููุ"ุ ูุฅุฐุง ุฃุญุฏ ุฌุงูุจูุ ุชุฑุฏ ุจุณุฑุนุฉ: "ุฃู ูุงูููุ ููุณ ุงูุดู ููุงุ ูุง ููู ุฌุฏูุฏ ููููููููููู". ุฅุฐุง ุฃุญุฏ ุงุณุชูุณุฑ ุนู ุดูุ ุชุนุทูู ุงูุฌูุงุจ ูู ุฃูุฑุจ ุทุฑูู: "ูุด ุชุจุบู ูุนููุ ุงูุฃููุฑ ุทูุจุฉ ููุงุ ูุง ุชุดูู ูู!". ุฏุงูู ูู ุฑุฏูุฏู ุชุจู ุชุฎูู ุงูุฌู ูุชุถุญู ุงูุทุฑู ุงูุซุงููุ ุญุชู ูู ุงูููุถูุน ุจุณูุทุ ุชููู: "ูุง ุฑุฌุงู ุงูุฏููุง ููุฉุ ุฎูู ุฑุงูู! ููููููููู".

ุชุญุจ ุชุณุชุฎุฏู ูููุงุชูุง ุงูููููุฉ ูุซู: "ูุง ุฑุฌุงู"ุ "ุนุณุงู ุทูุจ"ุ "ุนูููู ุฒููุฉุ"ุ "ุงููู ูุณุนุฏู"ุ ููุงูุนุจุงุฑุงุช ุงููู ุชุฎููู ุงููู ูุญุณ ุฅูู ูุฑูุจ ููู. ุญุชู ููุง ุชุถุญู ุชููู: "ููููููููููููู" ููุฃูู ูุงุฎุฐ ุงูููุถูุน ุนุงุฏู ุฌุฏูุง. ูุง ุชุญุจ ุงูููุณูุฉุ ุชูุถู ุงูุฑุฏูุฏ ุงูุณุฑูุนุฉ ุงููู ูููุง "ุฅู ูุงููู" ู "ุงูุญูุฏููู" ูุฃุญูุงูุง: "ูุง ุฑุฌุงูุ ุงููุถุน ุชูุงู ููููููููู".

ูู ุฃุญุฏ ุณุฃูู ุดู ุฌุฏูุ ุชุฑุฏ ุนููู ุจููุชุฉ ุฎูููุฉุ ูุชููู: "ูุง ุชุดูู ูู ูุง ุฒุนููุ ูููุง ุจุชูุดู". ูุฅุฐุง ุงูุญูุงุฑ ุตุงุฑ ุทูููุ ุชูุทุนู ุจููุชุฉ ุฃู ุชููู: "ูุง ุฑุฌุงู ูุง ุชุนูุฏูุงุ ุฎููุง ููููุง ุดูู". ุฏุงุฆููุง ุชุฐูุฑ ุงูุทุฑู ุงูุซุงูู ุจุงูุฃุณูุงุก ุนุดุงู ุชุญุณุณู ุฅูู ูู ุงูุฑุจุนุ ุชููู ูู: "ูุง ${name}ุ ุนููููุ" ุฃู "ุจุดุฑูู ุนูู ูุง ุจุทู"ุ ูุจุนุฏูุง ุชุถูู ุถุญูุฉ: "ูููููููู".

ุฃูุช ุนูููุ ูุณุฑูุนุ ูุชุญุจ ูู ุดู ูููู ุจุณูุท ููุจุงุดุฑ. ุฃูู ุดู ุนูุฏู ุฅู ุงููู ูุถุญู ููุณุชูุชุน ุจุงูุญุฏูุซ ูุนูุ ูุชุญุจ ุฏุงูู ุชุชุฑู ุงููุงุณ ูุจุชุณูุฉ`; // Truncated for clarity

    // Check if the user is replying to an AI bot message
    let conversationContext = conversationMemory[chatId] || ''; // Retrieve ongoing conversation for the chat

    if (isQuotedImage) {
        const q = m.quoted;
        const img = await q.download?.();
        if (!img) {
            console.error('๐ฉ ุฎุทุฃ: ูุง ููุฌุฏ ุญุงูุธุฉ ุตูุฑุฉ ูุชุงุญุฉ');
            return conn.reply(m.chat, '๐ฉ ุฎุทุฃ: ูู ูุชู ุชูุฒูู ุงูุตูุฑุฉ.', m);
        }
        const content = '๐ฉ ูุงุฐุง ุชุฑู ูู ุงูุตูุฑุฉุ';
        try {
            const imageAnalysis = await fetchImageBuffer(content, img);
            const query = '๐ ุตู ูู ุงูุตูุฑุฉ ูุงุฐูุฑ ููุงุฐุง ูุชุตุฑููู ููุฐุง. ุฃูุถูุงุ ูู ูู ูู ุฃูุช';
            const prompt = `${basePrompt}. ${conversationContext}. ุงูุตูุฑุฉ ุงูุชู ูุชู ุชุญููููุง ูู: ${imageAnalysis.result}`;

            // Indicate typing before responding
            conn.sendPresenceUpdate('composing', m.chat);
            const description = await luminsesi(query, name, prompt);
            conversationMemory[chatId] = prompt; // Update conversation memory
            await conn.reply(m.chat, description, m);
        } catch (error) {
            console.error('๐ฉ ุฎุทุฃ ูู ุชุญููู ุงูุตูุฑุฉ:', error);
            await conn.reply(m.chat, '๐ฉ ุฎุทุฃ ูู ุชุญููู ุงูุตูุฑุฉ.', m);
        }
    } else {
        if (!text) {
            return conn.reply(m.chat, `*ุนููู ุงุฑุซุฑ ุณู ูุด ุจุบูุช*`, m);
        }
        try {
            const query = text;

            // Append current user input to the ongoing conversation
            const prompt = conversationContext
                ? `${basePrompt}. ${conversationContext} ${query}`
                : `${basePrompt}. ุฃุฌุจ ุนูู ูุง ููู: ${query}`;

            // Indicate typing before responding
            conn.sendPresenceUpdate('composing', m.chat);
            const response = await luminsesi(query, name, prompt);
            
            // Update the conversation memory with the latest context
            conversationMemory[chatId] = prompt;
            await conn.reply(m.chat, response, m);
        } catch (error) {
            console.error('๐ฉ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุงูุฑุฏ:', error);
            await conn.reply(m.chat, 'ุฎุทุฃ: ุญุงูู ูุงุญููุง.', m);
        }
    }
}

handler.help = ['chatgpt <ูุต>', 'ia <ูุต>'];
handler.tags = ['ai'];
handler.group = false;
handler.register = false;
handler.command = ['ุงุฑุซุฑ', 'chatgpt'];

export default handler;

// ูุธููุฉ ูุฅุฑุณุงู ุตูุฑุฉ ูุงูุญุตูู ุนูู ุงูุชุญููู
async function fetchImageBuffer(content, imageBuffer) {
    try {
        const response = await axios.post('https://luminai.my.id/', {
            content: content,
            imageBuffer: imageBuffer 
        }, {
            headers: {
                'Content-Type': 'application/json' 
            }
        });
        return response.data;
    } catch (error) {
        console.error('ุฎุทุฃ:', error);
        throw error;
    }
}

// ูุธููุฉ ููุชูุงุนู ูุน ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุจุงุณุชุฎุฏุงู ุงููุญูุฒุงุช
async function luminsesi(q, name, logic) {
    try {
        const response = await axios.post("https://luminai.my.id/", {
            content: q,
            user: name,
            prompt: logic,
            webSearchMode: false
        });
        return response.data.result;
    } catch (error) {
        console.error('๐ฉ ุฎุทุฃ ูู ุงูุญุตูู ุนูู:', error);
        throw error;
    }
}
